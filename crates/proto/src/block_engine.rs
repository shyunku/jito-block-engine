// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribePacketsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribePacketsResponse {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<super::shared::Header>,
    #[prost(message, optional, tag = "2")]
    pub batch: ::core::option::Option<super::packet::PacketBatch>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeBundlesRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeBundlesResponse {
    #[prost(message, repeated, tag = "1")]
    pub bundles: ::prost::alloc::vec::Vec<super::bundle::BundleUuid>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockBuilderFeeInfoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockBuilderFeeInfoResponse {
    #[prost(string, tag = "1")]
    pub pubkey: ::prost::alloc::string::String,
    /// commission (0-100)
    #[prost(uint64, tag = "2")]
    pub commission: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountsOfInterest {
    /// use * for all accounts
    #[prost(string, repeated, tag = "1")]
    pub accounts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountsOfInterestRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountsOfInterestUpdate {
    #[prost(string, repeated, tag = "1")]
    pub accounts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProgramsOfInterestRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProgramsOfInterestUpdate {
    #[prost(string, repeated, tag = "1")]
    pub programs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// A series of packets with an expiration attached to them.
/// The header contains a timestamp for when this packet was generated.
/// The expiry is how long the packet batches have before they expire and are forwarded to the validator.
/// This provides a more censorship resistant method to MEV than block engines receiving packets directly.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpiringPacketBatch {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<super::shared::Header>,
    #[prost(message, optional, tag = "2")]
    pub batch: ::core::option::Option<super::packet::PacketBatch>,
    #[prost(uint32, tag = "3")]
    pub expiry_ms: u32,
}
/// Packets and heartbeats are sent over the same stream.
/// ExpiringPacketBatches have an expiration attached to them so the block engine can track
/// how long it has until the relayer forwards the packets to the validator.
/// Heartbeats contain a timestamp from the system and is used as a simple and naive time-sync mechanism
/// so the block engine has some idea on how far their clocks are apart.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketBatchUpdate {
    #[prost(oneof = "packet_batch_update::Msg", tags = "1, 2")]
    pub msg: ::core::option::Option<packet_batch_update::Msg>,
}
/// Nested message and enum types in `PacketBatchUpdate`.
pub mod packet_batch_update {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(message, tag = "1")]
        Batches(super::ExpiringPacketBatch),
        #[prost(message, tag = "2")]
        Heartbeat(super::super::shared::Heartbeat),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartExpiringPacketStreamResponse {
    #[prost(message, optional, tag = "1")]
    pub heartbeat: ::core::option::Option<super::shared::Heartbeat>,
}
/// Generated client implementations.
pub mod block_engine_validator_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// / Validators can connect to Block Engines to receive packets and bundles.
    #[derive(Debug, Clone)]
    pub struct BlockEngineValidatorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BlockEngineValidatorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BlockEngineValidatorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BlockEngineValidatorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            BlockEngineValidatorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// / Validators can subscribe to the block engine to receive a stream of packets
        pub async fn subscribe_packets(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribePacketsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribePacketsResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_engine.BlockEngineValidator/SubscribePackets",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_engine.BlockEngineValidator",
                        "SubscribePackets",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// / Validators can subscribe to the block engine to receive a stream of simulated and profitable bundles
        pub async fn subscribe_bundles(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeBundlesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeBundlesResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_engine.BlockEngineValidator/SubscribeBundles",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_engine.BlockEngineValidator",
                        "SubscribeBundles",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Block builders can optionally collect fees. This returns fee information if a block builder wants to
        /// collect one.
        pub async fn get_block_builder_fee_info(
            &mut self,
            request: impl tonic::IntoRequest<super::BlockBuilderFeeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BlockBuilderFeeInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_engine.BlockEngineValidator/GetBlockBuilderFeeInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_engine.BlockEngineValidator",
                        "GetBlockBuilderFeeInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod block_engine_relayer_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// / Relayers can forward packets to Block Engines.
    /// / Block Engines provide an AccountsOfInterest field to only send transactions that are of interest.
    #[derive(Debug, Clone)]
    pub struct BlockEngineRelayerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BlockEngineRelayerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BlockEngineRelayerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BlockEngineRelayerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            BlockEngineRelayerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// / The block engine feeds accounts of interest (AOI) updates to the relayer periodically.
        /// / For all transactions the relayer receives, it forwards transactions to the block engine which write-lock
        /// / any of the accounts in the AOI.
        pub async fn subscribe_accounts_of_interest(
            &mut self,
            request: impl tonic::IntoRequest<super::AccountsOfInterestRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::AccountsOfInterestUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_engine.BlockEngineRelayer/SubscribeAccountsOfInterest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_engine.BlockEngineRelayer",
                        "SubscribeAccountsOfInterest",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn subscribe_programs_of_interest(
            &mut self,
            request: impl tonic::IntoRequest<super::ProgramsOfInterestRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ProgramsOfInterestUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_engine.BlockEngineRelayer/SubscribeProgramsOfInterest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_engine.BlockEngineRelayer",
                        "SubscribeProgramsOfInterest",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Validators can subscribe to packets from the relayer and receive a multiplexed signal that contains a mixture
        /// of packets and heartbeats.
        /// NOTE: This is a bi-directional stream due to a bug with how Envoy handles half closed client-side streams.
        /// The issue is being tracked here: https://github.com/envoyproxy/envoy/issues/22748. In the meantime, the
        /// server will stream heartbeats to clients at some reasonable cadence.
        pub async fn start_expiring_packet_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::PacketBatchUpdate>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<super::StartExpiringPacketStreamResponse>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_engine.BlockEngineRelayer/StartExpiringPacketStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_engine.BlockEngineRelayer",
                        "StartExpiringPacketStream",
                    ),
                );
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod block_engine_validator_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BlockEngineValidatorServer.
    #[async_trait]
    pub trait BlockEngineValidator: Send + Sync + 'static {
        /// Server streaming response type for the SubscribePackets method.
        type SubscribePacketsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::SubscribePacketsResponse,
                    tonic::Status,
                >,
            >
            + Send
            + 'static;
        /// / Validators can subscribe to the block engine to receive a stream of packets
        async fn subscribe_packets(
            &self,
            request: tonic::Request<super::SubscribePacketsRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribePacketsStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the SubscribeBundles method.
        type SubscribeBundlesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::SubscribeBundlesResponse,
                    tonic::Status,
                >,
            >
            + Send
            + 'static;
        /// / Validators can subscribe to the block engine to receive a stream of simulated and profitable bundles
        async fn subscribe_bundles(
            &self,
            request: tonic::Request<super::SubscribeBundlesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeBundlesStream>,
            tonic::Status,
        >;
        /// Block builders can optionally collect fees. This returns fee information if a block builder wants to
        /// collect one.
        async fn get_block_builder_fee_info(
            &self,
            request: tonic::Request<super::BlockBuilderFeeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BlockBuilderFeeInfoResponse>,
            tonic::Status,
        >;
    }
    /// / Validators can connect to Block Engines to receive packets and bundles.
    #[derive(Debug)]
    pub struct BlockEngineValidatorServer<T: BlockEngineValidator> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: BlockEngineValidator> BlockEngineValidatorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for BlockEngineValidatorServer<T>
    where
        T: BlockEngineValidator,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/block_engine.BlockEngineValidator/SubscribePackets" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribePacketsSvc<T: BlockEngineValidator>(pub Arc<T>);
                    impl<
                        T: BlockEngineValidator,
                    > tonic::server::ServerStreamingService<
                        super::SubscribePacketsRequest,
                    > for SubscribePacketsSvc<T> {
                        type Response = super::SubscribePacketsResponse;
                        type ResponseStream = T::SubscribePacketsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribePacketsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockEngineValidator>::subscribe_packets(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubscribePacketsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_engine.BlockEngineValidator/SubscribeBundles" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeBundlesSvc<T: BlockEngineValidator>(pub Arc<T>);
                    impl<
                        T: BlockEngineValidator,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeBundlesRequest,
                    > for SubscribeBundlesSvc<T> {
                        type Response = super::SubscribeBundlesResponse;
                        type ResponseStream = T::SubscribeBundlesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeBundlesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockEngineValidator>::subscribe_bundles(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubscribeBundlesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_engine.BlockEngineValidator/GetBlockBuilderFeeInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockBuilderFeeInfoSvc<T: BlockEngineValidator>(
                        pub Arc<T>,
                    );
                    impl<
                        T: BlockEngineValidator,
                    > tonic::server::UnaryService<super::BlockBuilderFeeInfoRequest>
                    for GetBlockBuilderFeeInfoSvc<T> {
                        type Response = super::BlockBuilderFeeInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BlockBuilderFeeInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockEngineValidator>::get_block_builder_fee_info(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetBlockBuilderFeeInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: BlockEngineValidator> Clone for BlockEngineValidatorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: BlockEngineValidator> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: BlockEngineValidator> tonic::server::NamedService
    for BlockEngineValidatorServer<T> {
        const NAME: &'static str = "block_engine.BlockEngineValidator";
    }
}
/// Generated server implementations.
pub mod block_engine_relayer_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BlockEngineRelayerServer.
    #[async_trait]
    pub trait BlockEngineRelayer: Send + Sync + 'static {
        /// Server streaming response type for the SubscribeAccountsOfInterest method.
        type SubscribeAccountsOfInterestStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::AccountsOfInterestUpdate,
                    tonic::Status,
                >,
            >
            + Send
            + 'static;
        /// / The block engine feeds accounts of interest (AOI) updates to the relayer periodically.
        /// / For all transactions the relayer receives, it forwards transactions to the block engine which write-lock
        /// / any of the accounts in the AOI.
        async fn subscribe_accounts_of_interest(
            &self,
            request: tonic::Request<super::AccountsOfInterestRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeAccountsOfInterestStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the SubscribeProgramsOfInterest method.
        type SubscribeProgramsOfInterestStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::ProgramsOfInterestUpdate,
                    tonic::Status,
                >,
            >
            + Send
            + 'static;
        async fn subscribe_programs_of_interest(
            &self,
            request: tonic::Request<super::ProgramsOfInterestRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeProgramsOfInterestStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the StartExpiringPacketStream method.
        type StartExpiringPacketStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::StartExpiringPacketStreamResponse,
                    tonic::Status,
                >,
            >
            + Send
            + 'static;
        /// Validators can subscribe to packets from the relayer and receive a multiplexed signal that contains a mixture
        /// of packets and heartbeats.
        /// NOTE: This is a bi-directional stream due to a bug with how Envoy handles half closed client-side streams.
        /// The issue is being tracked here: https://github.com/envoyproxy/envoy/issues/22748. In the meantime, the
        /// server will stream heartbeats to clients at some reasonable cadence.
        async fn start_expiring_packet_stream(
            &self,
            request: tonic::Request<tonic::Streaming<super::PacketBatchUpdate>>,
        ) -> std::result::Result<
            tonic::Response<Self::StartExpiringPacketStreamStream>,
            tonic::Status,
        >;
    }
    /// / Relayers can forward packets to Block Engines.
    /// / Block Engines provide an AccountsOfInterest field to only send transactions that are of interest.
    #[derive(Debug)]
    pub struct BlockEngineRelayerServer<T: BlockEngineRelayer> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: BlockEngineRelayer> BlockEngineRelayerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BlockEngineRelayerServer<T>
    where
        T: BlockEngineRelayer,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/block_engine.BlockEngineRelayer/SubscribeAccountsOfInterest" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeAccountsOfInterestSvc<T: BlockEngineRelayer>(
                        pub Arc<T>,
                    );
                    impl<
                        T: BlockEngineRelayer,
                    > tonic::server::ServerStreamingService<
                        super::AccountsOfInterestRequest,
                    > for SubscribeAccountsOfInterestSvc<T> {
                        type Response = super::AccountsOfInterestUpdate;
                        type ResponseStream = T::SubscribeAccountsOfInterestStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AccountsOfInterestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockEngineRelayer>::subscribe_accounts_of_interest(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubscribeAccountsOfInterestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_engine.BlockEngineRelayer/SubscribeProgramsOfInterest" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeProgramsOfInterestSvc<T: BlockEngineRelayer>(
                        pub Arc<T>,
                    );
                    impl<
                        T: BlockEngineRelayer,
                    > tonic::server::ServerStreamingService<
                        super::ProgramsOfInterestRequest,
                    > for SubscribeProgramsOfInterestSvc<T> {
                        type Response = super::ProgramsOfInterestUpdate;
                        type ResponseStream = T::SubscribeProgramsOfInterestStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ProgramsOfInterestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockEngineRelayer>::subscribe_programs_of_interest(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubscribeProgramsOfInterestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_engine.BlockEngineRelayer/StartExpiringPacketStream" => {
                    #[allow(non_camel_case_types)]
                    struct StartExpiringPacketStreamSvc<T: BlockEngineRelayer>(
                        pub Arc<T>,
                    );
                    impl<
                        T: BlockEngineRelayer,
                    > tonic::server::StreamingService<super::PacketBatchUpdate>
                    for StartExpiringPacketStreamSvc<T> {
                        type Response = super::StartExpiringPacketStreamResponse;
                        type ResponseStream = T::StartExpiringPacketStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::PacketBatchUpdate>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockEngineRelayer>::start_expiring_packet_stream(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StartExpiringPacketStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: BlockEngineRelayer> Clone for BlockEngineRelayerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: BlockEngineRelayer> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: BlockEngineRelayer> tonic::server::NamedService
    for BlockEngineRelayerServer<T> {
        const NAME: &'static str = "block_engine.BlockEngineRelayer";
    }
}
